# -*- coding: utf-8 -*-
"""Emp_burnout

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rCIAgO798JRd_LHohPDm8B7xv-LTvelN
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

import numpy as np

df=pd.read_excel('/content/drive/MyDrive/employee_burnout_.xlsx')

df.head()#print first five columns

df.info()#to view thr information like number of null values in a column

df.describe()

df.isnull().sum()

df.isnull()

df['Resource Allocation'].value_counts()

df['Resource Allocation'].min()

df['Resource Allocation'].mean()

df['Resource Allocation'].max()

df['Resource Allocation'].median()

df['Resource Allocation'].mode()

df['Resource Allocation'].fillna(df['Resource Allocation'].median(), inplace=True)

df.isnull().sum()

df['Mental Fatigue Score'].value_counts()

df['Mental Fatigue Score'].min()

df['Mental Fatigue Score'].max()

df['Mental Fatigue Score'].mean()

df['Mental Fatigue Score'].median()

df['Mental Fatigue Score'].mode()

df['Mental Fatigue Score'].fillna(df['Mental Fatigue Score'].mean(), inplace=True)

df.isnull().sum()

df['Burn Rate'].value_counts()

df['Burn Rate'].min()

df['Burn Rate'].max()

df['Burn Rate'].mean()

df['Burn Rate'].median()

df['Burn Rate'].mode()

df['Burn Rate'].fillna(df['Burn Rate'].median(),inplace=True)

df.isnull().sum()

"""DATA VISUALIZATION"""

import matplotlib.pyplot as plt
import seaborn as sns

plt.scatter(df['Resource Allocation'],df['Mental Fatigue Score'])

sns.barplot(data=df,x='Gender',y='Burn Rate',hue='Resource Allocation')

gender_counts=df['Gender'].value_counts()
plt.pie(gender_counts,labels=gender_counts.index,autopct='%1f%%')
plt.title("Gender Distribution")
plt.show()

sns.barplot(data=df,x='Gender',y='Burn Rate',hue='Company Type',ci=True)

sns.barplot(data=df,x='Gender',y='Mental Fatigue Score',hue='Burn Rate',ci=True)

sns.scatterplot(data=df,x='Mental Fatigue Score',y='Burn Rate')

"""MODEL BUILDING
( LINEAR REGRESSION)
"""

df['Gender']=df['Gender'].map({'Male':0,'Female':1})

df['WFH Setup Available']=df['WFH Setup Available'].map({'Yes':1,'No':0})

df.info()

from sklearn.model_selection import train_test_split
x=df[['Gender','Mental Fatigue Score','Designation','Resource Allocation','WFH Setup Available']]
y=df['Burn Rate']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=30)

x_test.head()

y_test.head()

x_train.head()

y_train.head()

x_train.shape

y_train.shape

x_test.shape

x_train.shape

from sklearn import linear_model
clf=linear_model.LinearRegression()

clf

model=clf.fit(x_train,y_train)

model

model.coef_#coefficeint

model.intercept_#intercept

y_predict=model.predict(x_test)

x_test[0:5]

y_test[0:5]

y_predict[0:5]

df_temp = pd.DataFrame({'Actual': y_test, 'Predicted': y_predict})
df_temp.head()

mae=np.mean(np.abs(y_predict-y_test))

print("MAE:\t",mae)

mse=np.mean((y_predict-y_test)*(y_predict-y_test))

np.sqrt(mse)

r2score=clf.score(x,y)
print("r2score=",r2score)

r2score=clf.score(x,y)
print("r2score=",r2score)

